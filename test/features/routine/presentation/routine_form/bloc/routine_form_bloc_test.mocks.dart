// Mocks generated by Mockito 5.x - kept manually to avoid build_runner step
import 'dart:async' as i3;
import 'package:dartz/dartz.dart' as i2;
import 'package:mockito/mockito.dart' as i1;
import 'package:fitness_app/core/errors/failures.dart' as i4;
import 'package:fitness_app/features/home/domain/entities/routine.dart' as i5;
import 'package:fitness_app/features/home/domain/usecases/add_routine.dart'
    as i6;
import 'package:fitness_app/features/home/domain/usecases/update_routine.dart'
    as i7;

class _FakeEither_0<L, R> extends i1.Fake implements i2.Either<L, R> {}

class MockAddRoutine extends i1.Mock implements i6.AddRoutine {
  @override
  i3.Future<i2.Either<i4.Failure, int>?> call(i5.Routine? routine) =>
      (super.noSuchMethod(Invocation.method(#call, [routine]),
              returnValue: Future<i2.Either<i4.Failure, int>?>.value(
                  _FakeEither_0<i4.Failure, int>()))
          as i3.Future<i2.Either<i4.Failure, int>?>);
}

class MockUpdateRoutine extends i1.Mock implements i7.UpdateRoutine {
  @override
  i3.Future<i2.Either<i4.Failure, int>?> call(i5.Routine? routine) =>
      (super.noSuchMethod(Invocation.method(#call, [routine]),
              returnValue: Future<i2.Either<i4.Failure, int>?>.value(
                  _FakeEither_0<i4.Failure, int>()))
          as i3.Future<i2.Either<i4.Failure, int>?>);
}
