// Mocks generated by Mockito 5.x - kept manually to avoid build_runner step
import 'dart:async' as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:fitness_app/core/errors/failures.dart' as _i4;
import 'package:fitness_app/features/routine/domain/entities/routine.dart' as _i5;
import 'package:fitness_app/features/routine/domain/usecases/add_routine.dart' as _i6;
import 'package:fitness_app/features/routine/domain/usecases/update_routine.dart' as _i7;

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class MockAddRoutine extends _i1.Mock implements _i6.AddRoutine {
  @override
  _i3.Future<_i2.Either<_i4.Failure, int>?> call(_i5.Routine? routine) =>
      (super.noSuchMethod(Invocation.method(#call, [routine]),
              returnValue:
                  Future<_i2.Either<_i4.Failure, int>?>.value(_FakeEither_0<_i4.Failure, int>()))
          as _i3.Future<_i2.Either<_i4.Failure, int>?>);
}

class MockUpdateRoutine extends _i1.Mock implements _i7.UpdateRoutine {
  @override
  _i3.Future<_i2.Either<_i4.Failure, int>?> call(_i5.Routine? routine) =>
      (super.noSuchMethod(Invocation.method(#call, [routine]),
              returnValue:
                  Future<_i2.Either<_i4.Failure, int>?>.value(_FakeEither_0<_i4.Failure, int>()))
          as _i3.Future<_i2.Either<_i4.Failure, int>?>);
}

