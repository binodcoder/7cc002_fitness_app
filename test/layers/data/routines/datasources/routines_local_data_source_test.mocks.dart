// Mocks generated by Mockito 5.4.6 from annotations
// in fitness_app/test/layers/data/routines/datasources/routines_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fitness_app/shared/data/local/db_helper.dart' as _i3;
import 'package:fitness_app/features/live_training/data/models/live_training_model.dart'
    as _i6;
import 'package:fitness_app/features/register/data/models/user_model.dart'
    as _i9;
import 'package:fitness_app/features/routine/data/models/routine_model.dart'
    as _i5;
import 'package:fitness_app/features/walk/data/models/walk_model.dart' as _i7;
import 'package:fitness_app/features/walk_media/data/models/walk_media_model.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i3.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database?> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database?>.value(),
      ) as _i4.Future<_i2.Database?>);

  @override
  _i4.Future<_i2.Database> initDatabase() => (super.noSuchMethod(
        Invocation.method(
          #initDatabase,
          [],
        ),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.method(
            #initDatabase,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<int> insertRoutine(_i5.RoutineModel? routineModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertRoutine,
          [routineModel],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.RoutineModel>> getRoutines() => (super.noSuchMethod(
        Invocation.method(
          #getRoutines,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.RoutineModel>>.value(<_i5.RoutineModel>[]),
      ) as _i4.Future<List<_i5.RoutineModel>>);

  @override
  _i4.Future<List<_i6.LiveTrainingModel>> getLiveTraining() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLiveTraining,
          [],
        ),
        returnValue: _i4.Future<List<_i6.LiveTrainingModel>>.value(
            <_i6.LiveTrainingModel>[]),
      ) as _i4.Future<List<_i6.LiveTrainingModel>>);

  @override
  _i4.Future<List<_i7.WalkModel>> getWalks() => (super.noSuchMethod(
        Invocation.method(
          #getWalks,
          [],
        ),
        returnValue: _i4.Future<List<_i7.WalkModel>>.value(<_i7.WalkModel>[]),
      ) as _i4.Future<List<_i7.WalkModel>>);

  @override
  _i4.Future<List<_i8.WalkMediaModel>> getWalkMedia() => (super.noSuchMethod(
        Invocation.method(
          #getWalkMedia,
          [],
        ),
        returnValue:
            _i4.Future<List<_i8.WalkMediaModel>>.value(<_i8.WalkMediaModel>[]),
      ) as _i4.Future<List<_i8.WalkMediaModel>>);

  @override
  _i4.Future<List<_i8.WalkMediaModel>> getWalkMediaByWalkId(dynamic walkId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWalkMediaByWalkId,
          [walkId],
        ),
        returnValue:
            _i4.Future<List<_i8.WalkMediaModel>>.value(<_i8.WalkMediaModel>[]),
      ) as _i4.Future<List<_i8.WalkMediaModel>>);

  @override
  _i4.Future<int> updatePost(_i9.UserModel? post) => (super.noSuchMethod(
        Invocation.method(
          #updatePost,
          [post],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deletePost(int? postId) => (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [postId],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  dynamic insertUser(_i9.UserModel? userModel) =>
      super.noSuchMethod(Invocation.method(
        #insertUser,
        [userModel],
      ));
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelperForTest extends _i1.Mock implements _i3.DatabaseHelper {
  @override
  _i4.Future<_i2.Database?> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.Database?>.value(),
      ) as _i4.Future<_i2.Database?>);

  @override
  _i4.Future<_i2.Database> initDatabase() => (super.noSuchMethod(
        Invocation.method(
          #initDatabase,
          [],
        ),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.method(
            #initDatabase,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.method(
            #initDatabase,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<int> insertRoutine(_i5.RoutineModel? routineModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertRoutine,
          [routineModel],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.RoutineModel>> getRoutines() => (super.noSuchMethod(
        Invocation.method(
          #getRoutines,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.RoutineModel>>.value(<_i5.RoutineModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.RoutineModel>>.value(<_i5.RoutineModel>[]),
      ) as _i4.Future<List<_i5.RoutineModel>>);

  @override
  _i4.Future<List<_i6.LiveTrainingModel>> getLiveTraining() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLiveTraining,
          [],
        ),
        returnValue: _i4.Future<List<_i6.LiveTrainingModel>>.value(
            <_i6.LiveTrainingModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i6.LiveTrainingModel>>.value(
                <_i6.LiveTrainingModel>[]),
      ) as _i4.Future<List<_i6.LiveTrainingModel>>);

  @override
  _i4.Future<List<_i7.WalkModel>> getWalks() => (super.noSuchMethod(
        Invocation.method(
          #getWalks,
          [],
        ),
        returnValue: _i4.Future<List<_i7.WalkModel>>.value(<_i7.WalkModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i7.WalkModel>>.value(<_i7.WalkModel>[]),
      ) as _i4.Future<List<_i7.WalkModel>>);

  @override
  _i4.Future<List<_i8.WalkMediaModel>> getWalkMedia() => (super.noSuchMethod(
        Invocation.method(
          #getWalkMedia,
          [],
        ),
        returnValue:
            _i4.Future<List<_i8.WalkMediaModel>>.value(<_i8.WalkMediaModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i8.WalkMediaModel>>.value(<_i8.WalkMediaModel>[]),
      ) as _i4.Future<List<_i8.WalkMediaModel>>);

  @override
  _i4.Future<List<_i8.WalkMediaModel>> getWalkMediaByWalkId(dynamic walkId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWalkMediaByWalkId,
          [walkId],
        ),
        returnValue:
            _i4.Future<List<_i8.WalkMediaModel>>.value(<_i8.WalkMediaModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i8.WalkMediaModel>>.value(<_i8.WalkMediaModel>[]),
      ) as _i4.Future<List<_i8.WalkMediaModel>>);

  @override
  _i4.Future<int> updatePost(_i9.UserModel? post) => (super.noSuchMethod(
        Invocation.method(
          #updatePost,
          [post],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deletePost(int? postId) => (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [postId],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  dynamic insertUser(_i9.UserModel? userModel) => super.noSuchMethod(
        Invocation.method(
          #insertUser,
          [userModel],
        ),
        returnValueForMissingStub: null,
      );
}
