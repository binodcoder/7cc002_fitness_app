// Mocks generated by Mockito 5.4.6 from annotations
// in fitness_app/test/layers/presentation/routine/bloc/routine_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i5;
import 'package:fitness_app/core/errors/failures.dart' as _i6;
import 'package:fitness_app/core/model/routine_model.dart' as _i7;
import 'package:fitness_app/core/usecases/usecase.dart' as _i8;
import 'package:fitness_app/layers/domain/routine/repositories/routine_repositories.dart'
    as _i2;
import 'package:fitness_app/layers/domain/routine/usecases/add_routine.dart'
    as _i9;
import 'package:fitness_app/layers/domain/routine/usecases/delete_routine.dart'
    as _i10;
import 'package:fitness_app/layers/domain/routine/usecases/get_routines.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeRoutineRepository_0 extends _i1.SmartFake
    implements _i2.RoutineRepository {
  _FakeRoutineRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetRoutines].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRoutines extends _i1.Mock implements _i3.GetRoutines {
  MockGetRoutines() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RoutineRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRoutineRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.RoutineRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i7.RoutineModel>>?> call(
          _i8.NoParams? noParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [noParams],
        ),
        returnValue: _i4
            .Future<_i5.Either<_i6.Failure, List<_i7.RoutineModel>>?>.value(),
      ) as _i4.Future<_i5.Either<_i6.Failure, List<_i7.RoutineModel>>?>);
}

/// A class which mocks [AddRoutine].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddRoutine extends _i1.Mock implements _i9.AddRoutine {
  MockAddRoutine() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RoutineRepository get addRoutineRepository => (super.noSuchMethod(
        Invocation.getter(#addRoutineRepository),
        returnValue: _FakeRoutineRepository_0(
          this,
          Invocation.getter(#addRoutineRepository),
        ),
      ) as _i2.RoutineRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, int>?> call(
          _i7.RoutineModel? routineModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [routineModel],
        ),
        returnValue: _i4.Future<_i5.Either<_i6.Failure, int>?>.value(),
      ) as _i4.Future<_i5.Either<_i6.Failure, int>?>);
}

/// A class which mocks [DeleteRoutine].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteRoutine extends _i1.Mock implements _i10.DeleteRoutine {
  MockDeleteRoutine() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RoutineRepository get routineRepository => (super.noSuchMethod(
        Invocation.getter(#routineRepository),
        returnValue: _FakeRoutineRepository_0(
          this,
          Invocation.getter(#routineRepository),
        ),
      ) as _i2.RoutineRepository);

  @override
  set routineRepository(_i2.RoutineRepository? value) => super.noSuchMethod(
        Invocation.setter(
          #routineRepository,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i5.Either<_i6.Failure, int>?> call(int? routineId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [routineId],
        ),
        returnValue: _i4.Future<_i5.Either<_i6.Failure, int>?>.value(),
      ) as _i4.Future<_i5.Either<_i6.Failure, int>?>);
}
